<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/16107.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>Deploy Cloudera Manager</title>
    <url>/49009.html</url>
    <content><![CDATA[<h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><p><a href="https://docs.cloudera.com/documentation/enterprise/6/6.3/topics/configure_cm_repo.html" target="_blank" rel="noopener">Cloudera Manager 官网安装步骤</a></p>
<p><a href="https://docs.cloudera.com/documentation/enterprise/6/release-notes/topics/rg_cm_6_version_download.html#concept_dcs_x11_3jb" target="_blank" rel="noopener">Cloudera Manager 官网下载网页</a></p>
<p><a href="https://archive.cloudera.com/cm6/6.3.1/redhat7/yum/" target="_blank" rel="noopener">Cloudera Manager 6.3.1 yum源</a></p>
<p><a href="https://archive.cloudera.com/cm6/6.3.1/repo-as-tarball/" target="_blank" rel="noopener">Cloudera Manager 6.3.1 离线包</a></p>
<p><a href="https://docs.cloudera.com/documentation/enterprise/6/release-notes/topics/rg_cdh_63_download.html#cdh_632-download" target="_blank" rel="noopener">CDH 官网下载网页</a></p>
<p><a href="https://archive.cloudera.com/cdh6/6.3.2/redhat7/yum/" target="_blank" rel="noopener">CDH 6.3.2 yum源</a></p>
<p><a href="https://archive.cloudera.com/cdh6/6.3.2/parcels/" target="_blank" rel="noopener">CDH 6.3.2 离线包</a></p>
<p><a href="https://blog.csdn.net/cloudmq/article/details/100876717" target="_blank" rel="noopener">离线部署参考</a></p>
<h3 id="离线包"><a href="#离线包" class="headerlink" title="离线包"></a>离线包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/cloudera-manager.repo </span><br><span class="line"></span><br><span class="line">[cloudera-manager]</span><br><span class="line">name=Cloudera Manager</span><br><span class="line">baseurl=https://wmqe-yum-repository.oss-cn-zhangjiakou-internal.aliyuncs.com/cm6/6.3.1/</span><br><span class="line">gpgkey =https://wmqe-yum-repository.oss-cn-zhangjiakou-internal.aliyuncs.com/cm6/6.3.1/RPM-GPG-KEY-cloudera</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure>



<h3 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.46.tar.gz</span><br><span class="line">tar zxvf mysql-connector-java-5.1.46.tar.gz</span><br><span class="line">mkdir -p /usr/share/java/</span><br><span class="line">cd mysql-connector-java-5.1.46</span><br><span class="line">cp mysql-connector-java-5.1.46-bin.jar /usr/share/java/mysql-connector-java.jar</span><br></pre></td></tr></table></figure>



<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># scm</span><br><span class="line">CREATE DATABASE scm DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class="line">GRANT ALL ON scm.* TO &#39;scm&#39;@&#39;%&#39; IDENTIFIED BY &#39;wmq20151118&#39;;</span><br><span class="line"></span><br><span class="line"># amon</span><br><span class="line">CREATE DATABASE amon DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class="line">GRANT ALL ON amon.* TO &#39;amon&#39;@&#39;%&#39; IDENTIFIED BY &#39;wmq20151118&#39;;</span><br><span class="line"></span><br><span class="line"># rman</span><br><span class="line">CREATE DATABASE rman DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class="line">GRANT ALL ON rman.* TO &#39;rman&#39;@&#39;%&#39; IDENTIFIED BY &#39;wmq20151118&#39;;</span><br><span class="line"></span><br><span class="line"># hue</span><br><span class="line">CREATE DATABASE hue DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci; </span><br><span class="line">GRANT ALL ON hue.* TO &#39;hue&#39;@&#39;%&#39; IDENTIFIED BY &#39;wmq20151118&#39;;</span><br><span class="line"></span><br><span class="line"># hive</span><br><span class="line">CREATE DATABASE metastore DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class="line">GRANT ALL ON metastore.* TO &#39;hive&#39;@&#39;%&#39; IDENTIFIED BY &#39;wmq20151118&#39;;</span><br><span class="line"></span><br><span class="line"># sentry</span><br><span class="line">CREATE DATABASE sentry DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;   </span><br><span class="line">GRANT ALL ON sentry.* TO &#39;sentry&#39;@&#39;%&#39; IDENTIFIED BY &#39;wmq20151118&#39;;</span><br><span class="line"></span><br><span class="line"># nav</span><br><span class="line">CREATE DATABASE nav DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;      </span><br><span class="line">GRANT ALL ON nav.* TO &#39;nav&#39;@&#39;%&#39; IDENTIFIED BY &#39;wmq20151118&#39;;</span><br><span class="line"></span><br><span class="line"># navms</span><br><span class="line">CREATE DATABASE navms DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class="line">GRANT ALL ON navms.* TO &#39;navms&#39;@&#39;%&#39; IDENTIFIED BY &#39;wmq20151118&#39;;</span><br><span class="line"></span><br><span class="line"># oozie</span><br><span class="line">CREATE DATABASE oozie DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;</span><br><span class="line">GRANT ALL ON oozie.* TO &#39;oozie&#39;@&#39;%&#39; IDENTIFIED BY &#39;wmq20151118&#39;;</span><br><span class="line"></span><br><span class="line"># flush</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<p>执行脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/opt/cloudera/cm/schema/scm_prepare_database.sh mysql scm scm</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载allkeys.asc文件，存在仓库</span></span><br><span class="line">https://archive.cloudera.com/cm6/6.3.1/allkeys.asc</span><br></pre></td></tr></table></figure>



<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start cloudera-scm-server</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -f /var/log/cloudera-scm-server/cloudera-scm-server.log</span><br></pre></td></tr></table></figure>



<h3 id="Oozie-ExtJS-library"><a href="#Oozie-ExtJS-library" class="headerlink" title="Oozie ExtJS library"></a>Oozie ExtJS library</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装oozie主机上执行</span></span><br><span class="line">cd /opt/cloudera/parcels/CDH/lib/oozie/libext/</span><br><span class="line">wget http://archive.cloudera.com/gplextras/misc/ext-2.2.zip</span><br><span class="line">unzip ext-2.2.zip</span><br><span class="line">chown oozie:oozie -R ext-2.2</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>deploy</category>
        <category>CDH</category>
      </categories>
      <tags>
        <tag>CDH</tag>
      </tags>
  </entry>
  <entry>
    <title>部署 Jumpserver 1.5.0</title>
    <url>/13359.html</url>
    <content><![CDATA[<h2 id="部署-Jumpserver-1-5-0"><a href="#部署-Jumpserver-1-5-0" class="headerlink" title="部署 Jumpserver 1.5.0"></a>部署 Jumpserver 1.5.0</h2><h3 id="1、基础设置"><a href="#1、基础设置" class="headerlink" title="1、基础设置"></a>1、基础设置</h3><p># 版本说明</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 操作系统：centos7.6</span></span><br><span class="line"><span class="comment"># jumpserver：1.5.0</span></span><br></pre></td></tr></table></figure>

<p># 升级所有包同时也升级软件和系统内核</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum update -y</span><br></pre></td></tr></table></figure>

<p># selinux配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">"s/SELINUX=enforcing/SELINUX=disabled/g"</span> /etc/selinux/config</span><br></pre></td></tr></table></figure>

<p># 安装依赖包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install wget gcc epel-release git vim</span><br></pre></td></tr></table></figure>



<h3 id="2、安装Redis"><a href="#2、安装Redis" class="headerlink" title="2、安装Redis"></a>2、安装Redis</h3><p># 安装 Redis, Jumpserver 使用 Redis 做 cache 和 celery broke</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install redis</span><br><span class="line">systemctl <span class="built_in">enable</span> redis</span><br><span class="line">systemctl start redis</span><br></pre></td></tr></table></figure>



<h3 id="3、安装MySQL"><a href="#3、安装MySQL" class="headerlink" title="3、安装MySQL"></a>3、安装MySQL</h3><p># 安装 MySQL（centos7下叫mariadb）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install mariadb mariadb-devel mariadb-server MariaDB-shared</span><br><span class="line">systemctl <span class="built_in">enable</span> mariadb</span><br><span class="line">systemctl start mariadb</span><br></pre></td></tr></table></figure>

<p># 创建数据库 Jumpserver 并授权</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uroot</span><br><span class="line">create database jumpserver default charset <span class="string">'utf8'</span>;</span><br><span class="line">grant all on jumpserver.* to <span class="string">'jumpserver'</span>@<span class="string">'127.0.0.1'</span> identified by <span class="string">'pawd123'</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>



<h3 id="4、配置Python环境"><a href="#4、配置Python环境" class="headerlink" title="4、配置Python环境"></a>4、配置Python环境</h3><p># 安装 Python3.6</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install python36 python36-devel</span><br></pre></td></tr></table></figure>

<p># 配置并载入 Python3 虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">python3.6 -m venv py3</span><br><span class="line"><span class="built_in">source</span> /opt/py3/bin/activate</span><br></pre></td></tr></table></figure>

<p># 看到下面的提示符代表成功, 以后运行 Jumpserver 都要先运行以上 source 命令, 载入环境后默认以下所有命令均在该虚拟环境中运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(py3) [root@localhost py3]</span><br></pre></td></tr></table></figure>



<h3 id="5、安装Jumpserver"><a href="#5、安装Jumpserver" class="headerlink" title="5、安装Jumpserver"></a>5、安装Jumpserver</h3><p># 下载 Jumpserver</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/</span><br><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/jumpserver/jumpserver.git</span><br></pre></td></tr></table></figure>

<p># 安装依赖 RPM 包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install $(cat /opt/jumpserver/requirements/rpm_requirements.txt)</span><br></pre></td></tr></table></figure>

<p># 安装 Python 库依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install --upgrade pip setuptools</span><br><span class="line">pip install -r /opt/jumpserver/requirements/requirements.txt</span><br></pre></td></tr></table></figure>

<p># 复制 Jumpserver 配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/jumpserver</span><br><span class="line">cp config_example.yml config.yml</span><br></pre></td></tr></table></figure>

<p># 生成随机SECRET_KEY</p>
<p>加密秘钥 生产环境中请修改为随机字符串, 请勿外泄, PS: 纯数字不可以</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SECRET_KEY=`cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 50`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"SECRET_KEY=<span class="variable">$SECRET_KEY</span>"</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>

<p># 生成随机BOOTSTRAP_TOKEN</p>
<p>预共享Token coco和guacamole用来注册服务账号, 不在使用原来的注册接受机制</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BOOTSTRAP_TOKEN=`cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 16` </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"BOOTSTRAP_TOKEN=<span class="variable">$BOOTSTRAP_TOKEN</span>"</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>

<p># 查看SECRET_KEY、BOOTSTRAP_TOKEN</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ~/.bashrc</span><br><span class="line">SECRET_KEY=c1NVKkBQonam9CqX8AWqLiCt4PMGmJTr3DYFGePG0Nz3QD9uY4</span><br><span class="line">BOOTSTRAP_TOKEN=nfmBa3WkbQ8leRRb</span><br></pre></td></tr></table></figure>

<p># 修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">"s/SECRET_KEY:/SECRET_KEY: <span class="variable">$SECRET_KEY</span>/g"</span> /opt/jumpserver/config.yml</span><br><span class="line">sed -i <span class="string">"s/BOOTSTRAP_TOKEN:/BOOTSTRAP_TOKEN: <span class="variable">$BOOTSTRAP_TOKEN</span>/g"</span> /opt/jumpserver/config.yml</span><br><span class="line">sed -i <span class="string">"s/# DEBUG: true/DEBUG: false/g"</span> /opt/jumpserver/config.yml</span><br><span class="line">sed -i <span class="string">"s/# LOG_LEVEL: DEBUG/LOG_LEVEL: ERROR/g"</span> /opt/jumpserver/config.yml</span><br><span class="line">sed -i <span class="string">"s/# SESSION_EXPIRE_AT_BROWSER_CLOSE: false/SESSION_EXPIRE_AT_BROWSER_CLOSE: true/g"</span> /opt/jumpserver/config.yml</span><br><span class="line">sed -i <span class="string">"s/DB_PASSWORD: /DB_PASSWORD: <span class="variable">$DB_PASSWORD</span>/g"</span> /opt/jumpserver/config.yml</span><br></pre></td></tr></table></figure>

<p># 查看完整 config.yml 配置文件</p>
<p>cat /opt/jumpserver/config.yml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SECURITY WARNING: keep the secret key used in production secret!</span></span><br><span class="line"><span class="comment"># 加密秘钥 生产环境中请修改为随机字符串，请勿外泄, 可使用命令生成 </span></span><br><span class="line"><span class="comment"># $ cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 49;echo</span></span><br><span class="line">SECRET_KEY: c1NVKkBQonnam9CqX8AGmJTr3DYFnam9CqX8A</span><br><span class="line"></span><br><span class="line"><span class="comment"># SECURITY WARNING: keep the bootstrap token used in production secret!</span></span><br><span class="line"><span class="comment"># 预共享Token coco和guacamole用来注册服务账号，不在使用原来的注册接受机制</span></span><br><span class="line">BOOTSTRAP_TOKEN: nam9CqX8A</span><br><span class="line"></span><br><span class="line"><span class="comment"># Development env open this, when error occur display the full process track, Production disable it</span></span><br><span class="line"><span class="comment"># DEBUG 模式 开启DEBUG后遇到错误时可以看到更多日志</span></span><br><span class="line">DEBUG: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DEBUG, INFO, WARNING, ERROR, CRITICAL can set. See https://docs.djangoproject.com/en/1.10/topics/logging/</span></span><br><span class="line"><span class="comment"># 日志级别</span></span><br><span class="line">LOG_LEVEL: ERROR</span><br><span class="line"><span class="comment"># LOG_DIR: </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Session expiration setting, Default 24 hour, Also set expired on on browser close</span></span><br><span class="line"><span class="comment"># 浏览器Session过期时间，默认24小时, 也可以设置浏览器关闭则过期</span></span><br><span class="line"><span class="comment"># SESSION_COOKIE_AGE: 86400</span></span><br><span class="line">SESSION_EXPIRE_AT_BROWSER_CLOSE: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Database setting, Support sqlite3, mysql, postgres ....</span></span><br><span class="line"><span class="comment"># 数据库设置</span></span><br><span class="line"><span class="comment"># See https://docs.djangoproject.com/en/1.10/ref/settings/#databases</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SQLite setting:</span></span><br><span class="line"><span class="comment"># 使用单文件sqlite数据库</span></span><br><span class="line"><span class="comment"># DB_ENGINE: sqlite3</span></span><br><span class="line"><span class="comment"># DB_NAME: </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL or postgres setting like:</span></span><br><span class="line"><span class="comment"># 使用Mysql作为数据库</span></span><br><span class="line">DB_ENGINE: mysql</span><br><span class="line">DB_HOST: 127.0.0.1</span><br><span class="line">DB_PORT: 3306</span><br><span class="line">DB_USER: jumpserver</span><br><span class="line">DB_PASSWORD: pawd123</span><br><span class="line">DB_NAME: jumpserver</span><br><span class="line"></span><br><span class="line"><span class="comment"># When Django start it will bind this host and port</span></span><br><span class="line"><span class="comment"># ./manage.py runserver 127.0.0.1:8080</span></span><br><span class="line"><span class="comment"># 运行时绑定端口</span></span><br><span class="line">HTTP_BIND_HOST: 0.0.0.0</span><br><span class="line">HTTP_LISTEN_PORT: 8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use Redis as broker for celery and web socket</span></span><br><span class="line"><span class="comment"># Redis配置</span></span><br><span class="line">REDIS_HOST: 127.0.0.1</span><br><span class="line">REDIS_PORT: 6379</span><br><span class="line"><span class="comment"># REDIS_PASSWORD: </span></span><br><span class="line"><span class="comment"># REDIS_DB_CELERY: 3</span></span><br><span class="line"><span class="comment"># REDIS_DB_CACHE: 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use OpenID authorization</span></span><br><span class="line"><span class="comment"># 使用OpenID 来进行认证设置</span></span><br><span class="line"><span class="comment"># BASE_SITE_URL: http://localhost:8080</span></span><br><span class="line"><span class="comment"># AUTH_OPENID: false  # True or False</span></span><br><span class="line"><span class="comment"># AUTH_OPENID_SERVER_URL: https://openid-auth-server.com/</span></span><br><span class="line"><span class="comment"># AUTH_OPENID_REALM_NAME: realm-name</span></span><br><span class="line"><span class="comment"># AUTH_OPENID_CLIENT_ID: client-id</span></span><br><span class="line"><span class="comment"># AUTH_OPENID_CLIENT_SECRET: client-secret</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Use Radius authorization</span></span><br><span class="line"><span class="comment"># 使用Radius来认证</span></span><br><span class="line"><span class="comment"># AUTH_RADIUS: false</span></span><br><span class="line"><span class="comment"># RADIUS_SERVER: localhost</span></span><br><span class="line"><span class="comment"># RADIUS_PORT: 1812</span></span><br><span class="line"><span class="comment"># RADIUS_SECRET: </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># OTP settings</span></span><br><span class="line"><span class="comment"># OTP/MFA 配置</span></span><br><span class="line"><span class="comment"># OTP_VALID_WINDOW: 0</span></span><br><span class="line"><span class="comment"># OTP_ISSUER_NAME: Jumpserver</span></span><br></pre></td></tr></table></figure>

<p># 运行 Jumpserver</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/jumpserver</span><br><span class="line">./jms start all -d</span><br></pre></td></tr></table></figure>

<p># 开机自启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/jms.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=jms</span><br><span class="line">After=network.target mariadb.service redis.service</span><br><span class="line">Wants=mariadb.service redis.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">Environment=<span class="string">"PATH=/opt/py3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin"</span></span><br><span class="line">ExecStart=/opt/jumpserver/jms start all -d</span><br><span class="line">ExecReload=</span><br><span class="line">ExecStop=/opt/jumpserver/jms stop</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>



<h3 id="6、安装coco"><a href="#6、安装coco" class="headerlink" title="6、安装coco"></a>6、安装coco</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/jumpserver/coco.git</span><br><span class="line"><span class="built_in">cd</span> /opt/coco</span><br><span class="line">yum -y install $(cat /opt/coco/requirements/rpm_requirements.txt)</span><br><span class="line">pip install -r /opt/coco/requirements/requirements.txt</span><br></pre></td></tr></table></figure>

<p># 复制配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp config_example.yml config.yml</span><br></pre></td></tr></table></figure>

<p># 配置文件完整配置</p>
<p>cat /opt/coco/config.yml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 项目名称, 会用来向Jumpserver注册, 识别而已, 不能重复</span></span><br><span class="line"><span class="comment"># NAME: &#123;&#123; Hostname &#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Jumpserver项目的url, api请求注册会使用</span></span><br><span class="line">CORE_HOST: http://127.0.0.1:8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bootstrap Token, 预共享秘钥, 用来注册coco使用的service account和terminal</span></span><br><span class="line"><span class="comment"># 请和jumpserver 配置文件中保持一致，注册完成后可以删除</span></span><br><span class="line">BOOTSTRAP_TOKEN: nam9CqX8A</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动时绑定的ip, 默认 0.0.0.0</span></span><br><span class="line"><span class="comment"># BIND_HOST: 0.0.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听的SSH端口号, 默认2222</span></span><br><span class="line"><span class="comment"># SSHD_PORT: 2222</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听的HTTP/WS端口号，默认5000</span></span><br><span class="line"><span class="comment"># HTTPD_PORT: 5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目使用的ACCESS KEY, 默认会注册,并保存到 ACCESS_KEY_STORE中,</span></span><br><span class="line"><span class="comment"># 如果有需求, 可以写到配置文件中, 格式 access_key_id:access_key_secret</span></span><br><span class="line"><span class="comment"># ACCESS_KEY: null</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ACCESS KEY 保存的地址, 默认注册后会保存到该文件中</span></span><br><span class="line"><span class="comment"># ACCESS_KEY_FILE: data/keys/.access_key</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密密钥</span></span><br><span class="line"><span class="comment"># SECRET_KEY: null</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志级别 [DEBUG, INFO, WARN, ERROR, FATAL, CRITICAL]</span></span><br><span class="line">LOG_LEVEL: ERROR</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志存放的目录</span></span><br><span class="line"><span class="comment"># LOG_DIR: logs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SSH白名单</span></span><br><span class="line"><span class="comment"># ALLOW_SSH_USER: all</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SSH黑名单, 如果用户同时在白名单和黑名单，黑名单优先生效</span></span><br><span class="line"><span class="comment"># BLOCK_SSH_USER:</span></span><br><span class="line"><span class="comment">#   -</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 和Jumpserver 保持心跳时间间隔</span></span><br><span class="line"><span class="comment"># HEARTBEAT_INTERVAL: 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Admin的名字，出问题会提示给用户</span></span><br><span class="line"><span class="comment"># ADMINS: ''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SSH连接超时时间 (default 15 seconds)</span></span><br><span class="line"><span class="comment"># SSH_TIMEOUT: 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 语言 [en,zh]</span></span><br><span class="line"><span class="comment"># LANGUAGE_CODE: zh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SFTP的根目录, 可选 /tmp, Home其他自定义目录</span></span><br><span class="line"><span class="comment"># SFTP_ROOT: /tmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SFTP是否显示隐藏文件</span></span><br><span class="line"><span class="comment"># SFTP_SHOW_HIDDEN_FILE: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否复用和用户后端资产已建立的连接(用户不会复用其他用户的连接)</span></span><br><span class="line"><span class="comment"># REUSE_CONNECTION: true</span></span><br></pre></td></tr></table></figure>

<p># 后台启动coco</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/coco/cocod start -d</span><br></pre></td></tr></table></figure>

<p># 开机自启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/coco.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=coco</span><br><span class="line">After=network.target jms.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/opt/coco/coco.pid</span><br><span class="line">Environment=<span class="string">"PATH=/opt/py3/bin"</span></span><br><span class="line">ExecStart=/opt/coco/cocod start -d</span><br><span class="line">ExecReload=</span><br><span class="line">ExecStop=/opt/coco/cocod stop</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>



<h3 id="7、下载Luna"><a href="#7、下载Luna" class="headerlink" title="7、下载Luna"></a>7、下载Luna</h3><p># 安装 Web Terminal 前端: Luna 需要 Nginx 来运行访问 访问(<a href="https://github.com/jumpserver/luna/releases)下载对应版本的" target="_blank" rel="noopener">https://github.com/jumpserver/luna/releases)下载对应版本的</a> release 包, 直接解压, 不需要编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">wget https://github.com/jumpserver/luna/releases/download/1.5.0/luna.tar.gz</span><br></pre></td></tr></table></figure>

<p># 如果网络有问题导致下载无法完成可以使用下面地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://demo.jumpserver.org/download/luna/1.5.0/luna.tar.gz</span><br></pre></td></tr></table></figure>

<p># 解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xf luna.tar.gz</span><br><span class="line">chown -R root:root luna</span><br></pre></td></tr></table></figure>



<h3 id="8、安装Nginx"><a href="#8、安装Nginx" class="headerlink" title="8、安装Nginx"></a>8、安装Nginx</h3><p># 安装 Nginx, 用作代理服务器整合 Jumpserver 与各个组件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/nginx.repo</span><br><span class="line"></span><br><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/7/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">yum -y install nginx</span><br></pre></td></tr></table></figure>

<p># 配置 Nginx 整合各组件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf /etc/nginx/conf.d/default.conf</span><br><span class="line">vim /etc/nginx/conf.d/jumpserver.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    <span class="comment"># http自动跳转到https</span></span><br><span class="line">    listen       80;</span><br><span class="line">    server_name jump.wmht.com;    </span><br><span class="line">    rewrite ^ https://<span class="variable">$http_host</span><span class="variable">$request_uri</span>? permanent;       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    <span class="comment"># 代理端口, 以后将通过此端口进行访问, 不再通过8080端口</span></span><br><span class="line">    listen 443 ssl;</span><br><span class="line"></span><br><span class="line">    ssl_certificate ssl/jump.wmht.com.pem;</span><br><span class="line">    ssl_certificate_key ssl/jump.wmht.com.key;</span><br><span class="line"></span><br><span class="line">    server_name jump.wmht.com;  <span class="comment"># 修改成你的域名或者注释掉</span></span><br><span class="line"></span><br><span class="line">    client_max_body_size 100m;  <span class="comment"># 录像及文件上传大小限制</span></span><br><span class="line"></span><br><span class="line">    location /luna/ &#123;</span><br><span class="line">        try_files <span class="variable">$uri</span> / /index.html;</span><br><span class="line">        <span class="built_in">alias</span> /opt/luna/;  <span class="comment"># luna 路径, 如果修改安装目录, 此处需要修改</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /media/ &#123;</span><br><span class="line">        add_header Content-Encoding gzip;</span><br><span class="line">        root /opt/jumpserver/data/;  <span class="comment"># 录像位置, 如果修改安装目录, 此处需要修改</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /static/ &#123;</span><br><span class="line">        root /opt/jumpserver/data/;  <span class="comment"># 静态资源, 如果修改安装目录, 此处需要修改</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /socket.io/ &#123;</span><br><span class="line">        proxy_pass       http://localhost:5000/socket.io/;  <span class="comment"># 如果coco安装在别的服务器, 请填写它的ip</span></span><br><span class="line">        proxy_buffering off;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        proxy_set_header Connection <span class="string">"upgrade"</span>;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /coco/ &#123;</span><br><span class="line">        proxy_pass       http://localhost:5000/coco/;  <span class="comment"># 如果coco安装在别的服务器, 请填写它的ip</span></span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /guacamole/ &#123;</span><br><span class="line">        proxy_pass       http://localhost:8081/;  <span class="comment"># 如果guacamole安装在别的服务器, 请填写它的ip</span></span><br><span class="line">        proxy_buffering off;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        proxy_set_header Connection <span class="variable">$http_connection</span>;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:8080;  <span class="comment"># 如果jumpserver安装在别的服务器, 请填写它的ip</span></span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p># 运行 Nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure>



<h3 id="9、访问"><a href="#9、访问" class="headerlink" title="9、访问"></a>9、访问</h3><p># 访问 UI (注意 没有 :8080 通过 nginx 代理端口进行访问)：</p>
<p><a href="http://192.168.244.144" target="_blank" rel="noopener">http://192.168.244.144</a><br>默认账号: admin 密码: admin 到会话管理-终端管理 接受 coco 等应用的注册</p>
<p># 测试ssh连接<br>ssh -p2222 <a href="mailto:admin@192.168.244.144">admin@192.168.244.144</a><br>密码: admin</p>
<h3 id="10、附启动命令"><a href="#10、附启动命令" class="headerlink" title="10、附启动命令"></a>10、附启动命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">systemctl start mariadb</span><br><span class="line">systemctl start redis</span><br><span class="line">systemctl start jms</span><br><span class="line">systemctl start coco</span><br><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>jumpserver</category>
      </categories>
      <tags>
        <tag>jumpserver</tag>
      </tags>
  </entry>
</search>
