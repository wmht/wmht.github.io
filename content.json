{"meta":{"title":"wmht","subtitle":"","description":"","author":"wmht","url":"http://wmht.net","root":"/"},"pages":[{"title":"about","date":"2020-07-17T03:10:57.000Z","updated":"2020-08-19T09:51:20.608Z","comments":true,"path":"about/index.html","permalink":"http://wmht.net/about/index.html","excerpt":"","text":"关于我 Name：wmhtGitHub：https://github.com/wmht"},{"title":"categories","date":"2020-07-22T09:10:50.000Z","updated":"2020-08-19T09:33:34.287Z","comments":true,"path":"categories/index.html","permalink":"http://wmht.net/categories/index.html","excerpt":"","text":""},{"title":"read","date":"2020-07-24T03:38:50.000Z","updated":"2020-08-19T09:51:39.770Z","comments":true,"path":"read/index.html","permalink":"http://wmht.net/read/index.html","excerpt":"","text":"阅读列表 MarkerHub：https://github.com/MarkerHub/JavaIndex"},{"title":"tags","date":"2020-07-17T03:10:38.000Z","updated":"2020-08-19T09:32:30.511Z","comments":true,"path":"tags/index.html","permalink":"http://wmht.net/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"部署 Jumpserver 1.5.0","slug":"jumpserver/部署-Jumpserver-1-5-0","date":"2020-10-23T08:37:14.000Z","updated":"2020-10-23T08:57:44.486Z","comments":true,"path":"13359.html","link":"","permalink":"http://wmht.net/13359.html","excerpt":"","text":"部署 Jumpserver 1.5.01、基础设置# 版本说明 12# 操作系统：centos7.6# jumpserver：1.5.0 # 升级所有包同时也升级软件和系统内核 1yum update -y # selinux配置 12setenforce 0sed -i \"s/SELINUX=enforcing/SELINUX=disabled/g\" /etc/selinux/config # 安装依赖包 1yum -y install wget gcc epel-release git vim 2、安装Redis# 安装 Redis, Jumpserver 使用 Redis 做 cache 和 celery broke 123yum -y install redissystemctl enable redissystemctl start redis 3、安装MySQL# 安装 MySQL（centos7下叫mariadb） 123yum -y install mariadb mariadb-devel mariadb-server MariaDB-sharedsystemctl enable mariadbsystemctl start mariadb # 创建数据库 Jumpserver 并授权 1234mysql -urootcreate database jumpserver default charset 'utf8';grant all on jumpserver.* to 'jumpserver'@'127.0.0.1' identified by 'pawd123';flush privileges; 4、配置Python环境# 安装 Python3.6 1yum -y install python36 python36-devel # 配置并载入 Python3 虚拟环境 123cd /optpython3.6 -m venv py3source /opt/py3/bin/activate # 看到下面的提示符代表成功, 以后运行 Jumpserver 都要先运行以上 source 命令, 载入环境后默认以下所有命令均在该虚拟环境中运行 1(py3) [root@localhost py3] 5、安装Jumpserver# 下载 Jumpserver 12cd /opt/git clone --depth=1 https://github.com/jumpserver/jumpserver.git # 安装依赖 RPM 包 1yum -y install $(cat /opt/jumpserver/requirements/rpm_requirements.txt) # 安装 Python 库依赖 12pip install --upgrade pip setuptoolspip install -r /opt/jumpserver/requirements/requirements.txt # 复制 Jumpserver 配置文件 12cd /opt/jumpservercp config_example.yml config.yml # 生成随机SECRET_KEY 加密秘钥 生产环境中请修改为随机字符串, 请勿外泄, PS: 纯数字不可以 12SECRET_KEY=`cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 50`echo \"SECRET_KEY=$SECRET_KEY\" &gt;&gt; ~/.bashrc # 生成随机BOOTSTRAP_TOKEN 预共享Token coco和guacamole用来注册服务账号, 不在使用原来的注册接受机制 12BOOTSTRAP_TOKEN=`cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 16` echo \"BOOTSTRAP_TOKEN=$BOOTSTRAP_TOKEN\" &gt;&gt; ~/.bashrc # 查看SECRET_KEY、BOOTSTRAP_TOKEN 123cat ~/.bashrcSECRET_KEY=c1NVKkBQonam9CqX8AWqLiCt4PMGmJTr3DYFGePG0Nz3QD9uY4BOOTSTRAP_TOKEN=nfmBa3WkbQ8leRRb # 修改配置文件 123456sed -i \"s/SECRET_KEY:/SECRET_KEY: $SECRET_KEY/g\" /opt/jumpserver/config.ymlsed -i \"s/BOOTSTRAP_TOKEN:/BOOTSTRAP_TOKEN: $BOOTSTRAP_TOKEN/g\" /opt/jumpserver/config.ymlsed -i \"s/# DEBUG: true/DEBUG: false/g\" /opt/jumpserver/config.ymlsed -i \"s/# LOG_LEVEL: DEBUG/LOG_LEVEL: ERROR/g\" /opt/jumpserver/config.ymlsed -i \"s/# SESSION_EXPIRE_AT_BROWSER_CLOSE: false/SESSION_EXPIRE_AT_BROWSER_CLOSE: true/g\" /opt/jumpserver/config.ymlsed -i \"s/DB_PASSWORD: /DB_PASSWORD: $DB_PASSWORD/g\" /opt/jumpserver/config.yml # 查看完整 config.yml 配置文件 cat /opt/jumpserver/config.yml 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576# SECURITY WARNING: keep the secret key used in production secret!# 加密秘钥 生产环境中请修改为随机字符串，请勿外泄, 可使用命令生成 # $ cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 49;echoSECRET_KEY: c1NVKkBQonnam9CqX8AGmJTr3DYFnam9CqX8A# SECURITY WARNING: keep the bootstrap token used in production secret!# 预共享Token coco和guacamole用来注册服务账号，不在使用原来的注册接受机制BOOTSTRAP_TOKEN: nam9CqX8A# Development env open this, when error occur display the full process track, Production disable it# DEBUG 模式 开启DEBUG后遇到错误时可以看到更多日志DEBUG: false# DEBUG, INFO, WARNING, ERROR, CRITICAL can set. See https://docs.djangoproject.com/en/1.10/topics/logging/# 日志级别LOG_LEVEL: ERROR# LOG_DIR: # Session expiration setting, Default 24 hour, Also set expired on on browser close# 浏览器Session过期时间，默认24小时, 也可以设置浏览器关闭则过期# SESSION_COOKIE_AGE: 86400SESSION_EXPIRE_AT_BROWSER_CLOSE: true# Database setting, Support sqlite3, mysql, postgres ....# 数据库设置# See https://docs.djangoproject.com/en/1.10/ref/settings/#databases# SQLite setting:# 使用单文件sqlite数据库# DB_ENGINE: sqlite3# DB_NAME: # MySQL or postgres setting like:# 使用Mysql作为数据库DB_ENGINE: mysqlDB_HOST: 127.0.0.1DB_PORT: 3306DB_USER: jumpserverDB_PASSWORD: pawd123DB_NAME: jumpserver# When Django start it will bind this host and port# ./manage.py runserver 127.0.0.1:8080# 运行时绑定端口HTTP_BIND_HOST: 0.0.0.0HTTP_LISTEN_PORT: 8080# Use Redis as broker for celery and web socket# Redis配置REDIS_HOST: 127.0.0.1REDIS_PORT: 6379# REDIS_PASSWORD: # REDIS_DB_CELERY: 3# REDIS_DB_CACHE: 4# Use OpenID authorization# 使用OpenID 来进行认证设置# BASE_SITE_URL: http://localhost:8080# AUTH_OPENID: false # True or False# AUTH_OPENID_SERVER_URL: https://openid-auth-server.com/# AUTH_OPENID_REALM_NAME: realm-name# AUTH_OPENID_CLIENT_ID: client-id# AUTH_OPENID_CLIENT_SECRET: client-secret## Use Radius authorization# 使用Radius来认证# AUTH_RADIUS: false# RADIUS_SERVER: localhost# RADIUS_PORT: 1812# RADIUS_SECRET: # OTP settings# OTP/MFA 配置# OTP_VALID_WINDOW: 0# OTP_ISSUER_NAME: Jumpserver # 运行 Jumpserver 12cd /opt/jumpserver./jms start all -d # 开机自启 12345678910111213141516vim /usr/lib/systemd/system/jms.service[Unit]Description=jmsAfter=network.target mariadb.service redis.serviceWants=mariadb.service redis.service[Service]Type=forkingEnvironment=\"PATH=/opt/py3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin\"ExecStart=/opt/jumpserver/jms start all -dExecReload=ExecStop=/opt/jumpserver/jms stop[Install]WantedBy=multi-user.target 6、安装coco12345cd /opt/git clone https://github.com/jumpserver/coco.gitcd /opt/cocoyum -y install $(cat /opt/coco/requirements/rpm_requirements.txt)pip install -r /opt/coco/requirements/requirements.txt # 复制配置文件 1cp config_example.yml config.yml # 配置文件完整配置 cat /opt/coco/config.yml 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162# 项目名称, 会用来向Jumpserver注册, 识别而已, 不能重复# NAME: &#123;&#123; Hostname &#125;&#125;# Jumpserver项目的url, api请求注册会使用CORE_HOST: http://127.0.0.1:8080# Bootstrap Token, 预共享秘钥, 用来注册coco使用的service account和terminal# 请和jumpserver 配置文件中保持一致，注册完成后可以删除BOOTSTRAP_TOKEN: nam9CqX8A# 启动时绑定的ip, 默认 0.0.0.0# BIND_HOST: 0.0.0.0# 监听的SSH端口号, 默认2222# SSHD_PORT: 2222# 监听的HTTP/WS端口号，默认5000# HTTPD_PORT: 5000# 项目使用的ACCESS KEY, 默认会注册,并保存到 ACCESS_KEY_STORE中,# 如果有需求, 可以写到配置文件中, 格式 access_key_id:access_key_secret# ACCESS_KEY: null# ACCESS KEY 保存的地址, 默认注册后会保存到该文件中# ACCESS_KEY_FILE: data/keys/.access_key# 加密密钥# SECRET_KEY: null# 设置日志级别 [DEBUG, INFO, WARN, ERROR, FATAL, CRITICAL]LOG_LEVEL: ERROR# 日志存放的目录# LOG_DIR: logs# SSH白名单# ALLOW_SSH_USER: all# SSH黑名单, 如果用户同时在白名单和黑名单，黑名单优先生效# BLOCK_SSH_USER:# -# 和Jumpserver 保持心跳时间间隔# HEARTBEAT_INTERVAL: 5# Admin的名字，出问题会提示给用户# ADMINS: ''# SSH连接超时时间 (default 15 seconds)# SSH_TIMEOUT: 15# 语言 [en,zh]# LANGUAGE_CODE: zh# SFTP的根目录, 可选 /tmp, Home其他自定义目录# SFTP_ROOT: /tmp# SFTP是否显示隐藏文件# SFTP_SHOW_HIDDEN_FILE: false# 是否复用和用户后端资产已建立的连接(用户不会复用其他用户的连接)# REUSE_CONNECTION: true # 后台启动coco 1/opt/coco/cocod start -d # 开机自启 12345678910111213141516vim /usr/lib/systemd/system/coco.service[Unit]Description=cocoAfter=network.target jms.service[Service]Type=forkingPIDFile=/opt/coco/coco.pidEnvironment=\"PATH=/opt/py3/bin\"ExecStart=/opt/coco/cocod start -dExecReload=ExecStop=/opt/coco/cocod stop[Install]WantedBy=multi-user.target 7、下载Luna# 安装 Web Terminal 前端: Luna 需要 Nginx 来运行访问 访问(https://github.com/jumpserver/luna/releases)下载对应版本的 release 包, 直接解压, 不需要编译 12cd /optwget https://github.com/jumpserver/luna/releases/download/1.5.0/luna.tar.gz # 如果网络有问题导致下载无法完成可以使用下面地址 1wget https://demo.jumpserver.org/download/luna/1.5.0/luna.tar.gz # 解压 12tar xf luna.tar.gzchown -R root:root luna 8、安装Nginx# 安装 Nginx, 用作代理服务器整合 Jumpserver 与各个组件 12345678vim /etc/yum.repos.d/nginx.repo[nginx]name=nginx repobaseurl=http://nginx.org/packages/centos/7/$basearch/gpgcheck=0enabled=1yum -y install nginx # 配置 Nginx 整合各组件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374rm -rf /etc/nginx/conf.d/default.confvim /etc/nginx/conf.d/jumpserver.confserver &#123; # http自动跳转到https listen 80; server_name jump.wmht.com; rewrite ^ https://$http_host$request_uri? permanent; &#125;server &#123; # 代理端口, 以后将通过此端口进行访问, 不再通过8080端口 listen 443 ssl; ssl_certificate ssl/jump.wmht.com.pem; ssl_certificate_key ssl/jump.wmht.com.key; server_name jump.wmht.com; # 修改成你的域名或者注释掉 client_max_body_size 100m; # 录像及文件上传大小限制 location /luna/ &#123; try_files $uri / /index.html; alias /opt/luna/; # luna 路径, 如果修改安装目录, 此处需要修改 &#125; location /media/ &#123; add_header Content-Encoding gzip; root /opt/jumpserver/data/; # 录像位置, 如果修改安装目录, 此处需要修改 &#125; location /static/ &#123; root /opt/jumpserver/data/; # 静态资源, 如果修改安装目录, 此处需要修改 &#125; location /socket.io/ &#123; proxy_pass http://localhost:5000/socket.io/; # 如果coco安装在别的服务器, 请填写它的ip proxy_buffering off; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; access_log off; &#125; location /coco/ &#123; proxy_pass http://localhost:5000/coco/; # 如果coco安装在别的服务器, 请填写它的ip proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; access_log off; &#125; location /guacamole/ &#123; proxy_pass http://localhost:8081/; # 如果guacamole安装在别的服务器, 请填写它的ip proxy_buffering off; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $http_connection; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; access_log off; &#125; location / &#123; proxy_pass http://localhost:8080; # 如果jumpserver安装在别的服务器, 请填写它的ip proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; &#125;&#125; # 运行 Nginx 123nginx -tsystemctl enable nginxsystemctl start nginx 9、访问# 访问 UI (注意 没有 :8080 通过 nginx 代理端口进行访问)： http://192.168.244.144默认账号: admin 密码: admin 到会话管理-终端管理 接受 coco 等应用的注册 # 测试ssh连接ssh -p2222 admin@192.168.244.144密码: admin 10、附启动命令123456#启动systemctl start mariadbsystemctl start redissystemctl start jmssystemctl start cocosystemctl start nginx","categories":[{"name":"jumpserver","slug":"jumpserver","permalink":"http://wmht.net/categories/jumpserver/"}],"tags":[{"name":"jumpserver","slug":"jumpserver","permalink":"http://wmht.net/tags/jumpserver/"}]},{"title":"Deploy Cloudera Manager","slug":"deploy/CDH/Deploy Cloudera Manager","date":"2020-07-17T07:39:09.000Z","updated":"2020-07-23T01:47:50.896Z","comments":true,"path":"49009.html","link":"","permalink":"http://wmht.net/49009.html","excerpt":"","text":"教程Cloudera Manager 官网安装步骤 Cloudera Manager 官网下载网页 Cloudera Manager 6.3.1 yum源 Cloudera Manager 6.3.1 离线包 CDH 官网下载网页 CDH 6.3.2 yum源 CDH 6.3.2 离线包 离线部署参考 离线包1234567vim /etc/yum.repos.d/cloudera-manager.repo [cloudera-manager]name=Cloudera Managerbaseurl=https://wmqe-yum-repository.oss-cn-zhangjiakou-internal.aliyuncs.com/cm6/6.3.1/gpgkey =https://wmqe-yum-repository.oss-cn-zhangjiakou-internal.aliyuncs.com/cm6/6.3.1/RPM-GPG-KEY-clouderagpgcheck=0 驱动12345wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.46.tar.gztar zxvf mysql-connector-java-5.1.46.tar.gzmkdir -p /usr/share/java/cd mysql-connector-java-5.1.46cp mysql-connector-java-5.1.46-bin.jar /usr/share/java/mysql-connector-java.jar 创建数据库1234567891011121314151617181920212223242526272829303132333435363738# scmCREATE DATABASE scm DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;GRANT ALL ON scm.* TO &#39;scm&#39;@&#39;%&#39; IDENTIFIED BY &#39;wmq20151118&#39;;# amonCREATE DATABASE amon DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;GRANT ALL ON amon.* TO &#39;amon&#39;@&#39;%&#39; IDENTIFIED BY &#39;wmq20151118&#39;;# rmanCREATE DATABASE rman DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;GRANT ALL ON rman.* TO &#39;rman&#39;@&#39;%&#39; IDENTIFIED BY &#39;wmq20151118&#39;;# hueCREATE DATABASE hue DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci; GRANT ALL ON hue.* TO &#39;hue&#39;@&#39;%&#39; IDENTIFIED BY &#39;wmq20151118&#39;;# hiveCREATE DATABASE metastore DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;GRANT ALL ON metastore.* TO &#39;hive&#39;@&#39;%&#39; IDENTIFIED BY &#39;wmq20151118&#39;;# sentryCREATE DATABASE sentry DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci; GRANT ALL ON sentry.* TO &#39;sentry&#39;@&#39;%&#39; IDENTIFIED BY &#39;wmq20151118&#39;;# navCREATE DATABASE nav DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci; GRANT ALL ON nav.* TO &#39;nav&#39;@&#39;%&#39; IDENTIFIED BY &#39;wmq20151118&#39;;# navmsCREATE DATABASE navms DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;GRANT ALL ON navms.* TO &#39;navms&#39;@&#39;%&#39; IDENTIFIED BY &#39;wmq20151118&#39;;# oozieCREATE DATABASE oozie DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;GRANT ALL ON oozie.* TO &#39;oozie&#39;@&#39;%&#39; IDENTIFIED BY &#39;wmq20151118&#39;;# flushFLUSH PRIVILEGES; 执行脚本 1/opt/cloudera/cm/schema/scm_prepare_database.sh mysql scm scm 12# 下载allkeys.asc文件，存在仓库https://archive.cloudera.com/cm6/6.3.1/allkeys.asc 启动1systemctl start cloudera-scm-server 1tail -f /var/log/cloudera-scm-server/cloudera-scm-server.log Oozie ExtJS library12345# 安装oozie主机上执行cd /opt/cloudera/parcels/CDH/lib/oozie/libext/wget http://archive.cloudera.com/gplextras/misc/ext-2.2.zipunzip ext-2.2.zipchown oozie:oozie -R ext-2.2","categories":[{"name":"deploy","slug":"deploy","permalink":"http://wmht.net/categories/deploy/"},{"name":"CDH","slug":"deploy/CDH","permalink":"http://wmht.net/categories/deploy/CDH/"}],"tags":[{"name":"CDH","slug":"CDH","permalink":"http://wmht.net/tags/CDH/"}]},{"title":"Hello World","slug":"test/hello-world","date":"2020-07-16T09:13:25.919Z","updated":"2020-07-22T09:27:38.487Z","comments":true,"path":"16107.html","link":"","permalink":"http://wmht.net/16107.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"test","slug":"test","permalink":"http://wmht.net/categories/test/"}],"tags":[{"name":"test","slug":"test","permalink":"http://wmht.net/tags/test/"}]}],"categories":[{"name":"jumpserver","slug":"jumpserver","permalink":"http://wmht.net/categories/jumpserver/"},{"name":"deploy","slug":"deploy","permalink":"http://wmht.net/categories/deploy/"},{"name":"CDH","slug":"deploy/CDH","permalink":"http://wmht.net/categories/deploy/CDH/"},{"name":"test","slug":"test","permalink":"http://wmht.net/categories/test/"}],"tags":[{"name":"jumpserver","slug":"jumpserver","permalink":"http://wmht.net/tags/jumpserver/"},{"name":"CDH","slug":"CDH","permalink":"http://wmht.net/tags/CDH/"},{"name":"test","slug":"test","permalink":"http://wmht.net/tags/test/"}]}